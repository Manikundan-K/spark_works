{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNl9+zHu9mfSlLekhF7LSPp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Manikundan-K/spark_works/blob/main/seasonal_trend.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "szLTHY0_Brm7",
        "outputId": "98aba222-4a0d-4be6-f8a0-35a3ea86adce"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-fb6eba36-a484-4c0c-8c13-bbc9b01ae10c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-fb6eba36-a484-4c0c-8c13-bbc9b01ae10c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving customer_purchase_data.csv to customer_purchase_data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql import SparkSession\n",
        "from pyspark.sql.functions import col, unix_timestamp, month, dayofweek, year\n",
        "\n",
        "# Initialize Spark session\n",
        "spark = SparkSession.builder.master(\"local\").appName(\"SeasonalTrendAnalysis\").getOrCreate()\n",
        "\n",
        "# Load the CSV file into a DataFrame\n",
        "df = spark.read.csv(\"customer_purchase_data.csv\", header=True, inferSchema=True)\n",
        "\n",
        "# Show the first few rows to check the data\n",
        "df.show(5)\n",
        "\n",
        "# Extract year, month, and day of week\n",
        "df1 = df.withColumn(\"year\", year(col(\"timestamp\"))) \\\n",
        "       .withColumn(\"month\", month(col(\"timestamp\"))) \\\n",
        "       .withColumn(\"day_of_week\", dayofweek(col(\"timestamp\"))) \\\n",
        "       .withColumn(\"weekday\", (col(\"day_of_week\") < 6).cast(\"boolean\"))  # Weekdays: True, weekends: False\n",
        "\n",
        "# Show the updated DataFrame\n",
        "df1.show(5)\n",
        "\n",
        "# Group by year and month, then calculate the total purchase amount\n",
        "monthly_trends = df1.groupBy(\"year\", \"month\").sum(\"purchase_amount\").orderBy(\"year\", \"month\")\n",
        "\n",
        "# Show the results\n",
        "monthly_trends.show(12)  # Showing the first 12 months\n",
        "# Group by day of the week and calculate total purchase amount\n",
        "day_of_week_trends = df1.groupBy(\"day_of_week\").sum(\"purchase_amount\").orderBy(\"day_of_week\")\n",
        "\n",
        "# Show the results\n",
        "day_of_week_trends.show()\n",
        "# Group by weekdays and weekends\n",
        "weekday_trends = df1.groupBy(\"weekday\").sum(\"purchase_amount\").orderBy(\"weekday\")\n",
        "\n",
        "# Show the results\n",
        "weekday_trends.show()\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "# Convert the PySpark DataFrame to Pandas for easier plotting\n",
        "monthly_trends_pd = monthly_trends.toPandas()\n",
        "\n",
        "# Plot the trends\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(monthly_trends_pd[\"year\"].astype(str) + \"-\" + monthly_trends_pd[\"month\"].astype(str),\n",
        "         monthly_trends_pd[\"sum(purchase_amount)\"], marker=\"o\")\n",
        "plt.title(\"Monthly Purchase Amounts\")\n",
        "plt.xlabel(\"Year-Month\")\n",
        "plt.ylabel(\"Total Purchase Amount\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "kyjlEEaQA110",
        "outputId": "e5eee4cd-bb6d-44d0-ec01-f7684c8eea01"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------+----------+-------------------+---------------+\n",
            "|customer_id|product_id|          timestamp|purchase_amount|\n",
            "+-----------+----------+-------------------+---------------+\n",
            "| customer_4| product_1|2023-05-19 00:00:00|         199.26|\n",
            "| customer_1| product_1|2023-08-03 00:00:00|         241.12|\n",
            "| customer_4| product_2|2023-04-29 00:00:00|         332.55|\n",
            "| customer_4| product_1|2023-05-31 00:00:00|         331.88|\n",
            "| customer_1| product_3|2023-07-11 00:00:00|          64.63|\n",
            "+-----------+----------+-------------------+---------------+\n",
            "only showing top 5 rows\n",
            "\n",
            "+-----------+----------+-------------------+---------------+----+-----+-----------+-------+\n",
            "|customer_id|product_id|          timestamp|purchase_amount|year|month|day_of_week|weekday|\n",
            "+-----------+----------+-------------------+---------------+----+-----+-----------+-------+\n",
            "| customer_4| product_1|2023-05-19 00:00:00|         199.26|2023|    5|          6|  false|\n",
            "| customer_1| product_1|2023-08-03 00:00:00|         241.12|2023|    8|          5|   true|\n",
            "| customer_4| product_2|2023-04-29 00:00:00|         332.55|2023|    4|          7|  false|\n",
            "| customer_4| product_1|2023-05-31 00:00:00|         331.88|2023|    5|          4|   true|\n",
            "| customer_1| product_3|2023-07-11 00:00:00|          64.63|2023|    7|          3|   true|\n",
            "+-----------+----------+-------------------+---------------+----+-----+-----------+-------+\n",
            "only showing top 5 rows\n",
            "\n",
            "+----+-----+--------------------+\n",
            "|year|month|sum(purchase_amount)|\n",
            "+----+-----+--------------------+\n",
            "|2023|    1|   16993.16999999999|\n",
            "|2023|    2|  18277.049999999996|\n",
            "|2023|    3|  27330.839999999993|\n",
            "|2023|    4|   27560.30999999999|\n",
            "|2023|    5|   21204.78000000001|\n",
            "|2023|    6|  19958.850000000002|\n",
            "|2023|    7|  23804.530000000002|\n",
            "|2023|    8|            21009.09|\n",
            "|2023|    9|  14534.979999999994|\n",
            "|2023|   10|  18914.630000000005|\n",
            "|2023|   11|  20035.639999999992|\n",
            "|2023|   12|  17807.390000000003|\n",
            "+----+-----+--------------------+\n",
            "only showing top 12 rows\n",
            "\n",
            "+-----------+--------------------+\n",
            "|day_of_week|sum(purchase_amount)|\n",
            "+-----------+--------------------+\n",
            "|          1|   36459.79999999999|\n",
            "|          2|  34499.850000000006|\n",
            "|          3|            33394.85|\n",
            "|          4|   33916.69000000001|\n",
            "|          5|  29469.279999999977|\n",
            "|          6|   42717.27999999998|\n",
            "|          7|  37746.130000000005|\n",
            "+-----------+--------------------+\n",
            "\n",
            "+-------+--------------------+\n",
            "|weekday|sum(purchase_amount)|\n",
            "+-------+--------------------+\n",
            "|  false|            80463.41|\n",
            "|   true|  167740.47000000012|\n",
            "+-------+--------------------+\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}